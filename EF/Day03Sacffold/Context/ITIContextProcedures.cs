// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using Day03Scaffold.Entities;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace Day03Scaffold.Context
{
    public partial class ITIContext
    {
        private IITIContextProcedures _procedures;

        public virtual IITIContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new ITIContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public IITIContextProcedures GetProcedures()
        {
            return Procedures;
        }
    }

    public partial class ITIContextProcedures : IITIContextProcedures
    {
        private readonly ITIContext _context;

        public ITIContextProcedures(ITIContext context)
        {
            _context = context;
        }

        public virtual async Task<int> GetStudentIDByNameAsync(string sName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "SName",
                    Size = 20,
                    Value = sName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[GetStudentIDByName] @SName = @SName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> GetStudentNameAndAgeByIDAsync(int? sid, OutputParameter<string> sName, OutputParameter<string> sAge, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterSName = new SqlParameter
            {
                ParameterName = "SName",
                Size = 20,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = sName?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };
            var parameterSAge = new SqlParameter
            {
                ParameterName = "SAge",
                Size = 20,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = sAge?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "sid",
                    Value = sid ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterSName,
                parameterSAge,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[GetStudentNameAndAgeByID] @sid = @sid, @SName = @SName OUTPUT, @SAge = @SAge OUTPUT", sqlParameters, cancellationToken);

            sName?.SetValue(parameterSName.Value);
            sAge?.SetValue(parameterSAge.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ShowAllStudentsResult>> ShowAllStudentsAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ShowAllStudentsResult>("EXEC @returnValue = [dbo].[ShowAllStudents]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ShowStudentsFromCairoResult>> ShowStudentsFromCairoAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ShowStudentsFromCairoResult>("EXEC @returnValue = [dbo].[ShowStudentsFromCairo]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<StudentByIDResult>> StudentByIDAsync(int? id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<StudentByIDResult>("EXEC @returnValue = [dbo].[StudentByID] @id = @id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
